1) Starting from "ps -ef"

2) Identfy the Thread which is causing the CPU spike of the PID

    In Linux : ps -Lo pid,ruser,time,%cpu,lwp $PID

Here is sample output from a JBoss server running on my localhost with PID 8292

 ps -Lo pid,ruser,time,%cpu,lwp $8292

 8292 sirmes   00:00:00  2.3 25229

 8292 sirmes   00:00:00  1.1 25230

 8292 sirmes   00:00:00  1.3 25231

 8292 sirmes   00:00:00  1.3 25232

Thread 25229 is taking 2.3% of CPU

25229 DEC is equal to 628D HEX 

3) In Linux you can convert using command line : 

 echo "ibase=10; obase=16; 25229 |bc 

 628D

4) Search Thread dump for 628d

"HttpManagementService-threads - 10" prio=10 tid=0x00007fa98817d800 nid=0x628d waiting on condition [0x00007fa99cb36000]

   java.lang.Thread.State: TIMED_WAITING (parking)
        at sun.misc.Unsafe.park(Native Method)
        - parking to wait for  <0x00000000e0524b90> (a java.util.concurrent.SynchronousQueue$TransferStack)
        at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:198)
        at java.util.concurrent.SynchronousQueue$TransferStack.awaitFulfill(SynchronousQueue.java:424)
        at java.util.concurrent.SynchronousQueue$TransferStack.transfer(SynchronousQueue.java:323)
        at java.util.concurrent.SynchronousQueue.poll(SynchronousQueue.java:874)
        at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:945)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
        at java.lang.Thread.run(Thread.java:662)
        at org.jboss.threads.JBossThread.run(JBossThread.java:122)

<<EOD>>
